## default template name
template_name: amazon-linux-2022
## minimal amazon linux AMI
host_ami:
  # id: <ami-id> # you can use this if you have a specific ami-id you want to use
  owner: amazon
  arch: x86_64
  name: al2022-ami-minimal-*
## if you want to bootstrap on a specific availability zone, you can specify it here
# availability_zone:
prefered_instance_specs:
  # instance_type: t2.micro # use this or min_memory and min_cpu
  min_memory: 1024
  min_cpu: 1
## change this to your key pair name
key_name: Arcan
## change this to your instance profile arn. format is: arn:aws:iam::<account-id>:instance-profile/<instance-profile-name>
# instance_profile_arn:
bootstrap_ami:
  owner: amazon
  name: al2022-ami-minimal-*
  arch: x86_64
## expressed in (GB)
storage_size: 2
startup_script: |
  #!/bin/bash -xe
  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

  ## add required packages
  yum install -y systemd-resolved systemd-networkd systemd-container
  ## enable networkd and resolved 
  systemctl start systemd-resolved 
  systemctl start systemd-networkd 
  
  ## wait for the volume to attach
  DEVICE=/dev/sdf
  while [ ! -e $DEVICE ]; do
    sleep 1s
  done

  ## mount dev space
  mkdir -p /devspace 
  mount -t ext4 "$DEVICE"1 /devspace 

  ## boot the chroot machine
  export SYSTEMD_SECCOMP=0
  systemd-nspawn --boot --quiet --machine=devspace --capability=all -D /devspace/
bootstrap_script: |
  #!/bin/bash -xe
  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

  RELEASEVER="2022.0.20220531"
  dnf -y install parted

  ## attach the volume
  DEVICE=/dev/xvdf
  ROOTFS=/rootfs

  ## wait for the volume to attach
  while [ ! -e $DEVICE ]; do
    sleep 1s
  done

  ## create the partition
  parted --script "$DEVICE" -- \
  mklabel msdos \
  mkpart primary xfs 1 -1 \
  set 1 boot on

  PARTITION="${DEVICE}1"

  echo "Wait for device partition creation"
  while [[ ! -e "$PARTITION" ]]; do sleep 1; done

  ## create the filesystem
  mkfs.xfs -f "$PARTITION"

  echo "Chroot Mount /"
  mkdir -p "$ROOTFS"
  mount "$PARTITION" "$ROOTFS"

  ## bootstrap the chroot machine
  dnf --installroot="$ROOTFS" --releasever=$RELEASEVER -y update
  dnf --installroot="$ROOTFS" --releasever=$RELEASEVER -y group install ami-minimal

  ## add ssd key to the chroot machine and export it to port 2222
  mkdir -p $ROOTFS/root/.ssh
  curl http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > $ROOTFS/root/.ssh/authorized_keys
  ln -s $ROOTFS/usr/lib/systemd/system/sshd.service $ROOTFS/etc/systemd/system/multi-user.target.wants/sshd.service
  sed '/#Port 22/s/#Port 22/Port 2222/g' -i $ROOTFS/etc/ssh/sshd_config

  ln -s $ROOTFS/usr/lib/systemd/system/cloud-init.service $ROOTFS/etc/systemd/system/multi-user.target.wants/cloud-init.service
  ln -s $ROOTFS/usr/lib/systemd/system/cloud-config.service $ROOTFS/etc/systemd/system/multi-user.target.wants/cloud-config.service
  ln -s $ROOTFS/usr/lib/systemd/system/cloud-final.service $ROOTFS/etc/systemd/system/multi-user.target.wants/cloud-final.service

