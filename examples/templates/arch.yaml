## default template name
template_name: archlinux
## minimal amazon linux AMI
host_ami:
  # id: <ami-id> # you can use this if you have a specific ami-id you want to use
  owner: amazon
  arch: x86_64
  name: al2022-ami-minimal-*
## if you want to bootstrap on a specific availability zone, you can specify it here
# availability_zone:
prefered_instance_specs:
  instance_type: t2.micro # use this or min_memory and min_cpu
  # min_memory: 1024
  # min_cpu: 1
## change this to your key pair name
key_name:
## change this to your instance profile arn. format is: arn:aws:iam::<account-id>:instance-profile/<instance-profile-name>
# instance_profile_arn:
## Arch Linux EC2 optimized AMI (us-east-1), only used when creating the dev-space
## you can find the amis here: http://arch-ami-list.drzee.net/
bootstrap_ami:
  # id: ami-0f05979841bc99639
  ## you can also use filters to find the ami:
  owner: 647457786197 # http://arch-ami-list.drzee.net/
  name: arch-linux-ec2*
  arch: x86_64
## expressed in (GB)
storage_size: 2
startup_script: |
  #!/bin/bash -xe
  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

  ## add required packages
  yum install -y systemd-resolved systemd-networkd systemd-container
  ## enable networkd and resolved 
  systemctl start systemd-resolved 
  systemctl start systemd-networkd 
  
  ## wait for the volume to attach
  DEVICE=/dev/sdf
  while [ ! -e $DEVICE ]; do
    sleep 1s
  done

  ## mount arch linux
  mkdir -p /arch 
  mount -t ext4 "$DEVICE"1 /arch 

  ## boot the chroot machine
  export SYSTEMD_SECCOMP=0
  systemd-nspawn --boot --quiet --machine=arch --capability=all -D /arch/
bootstrap_script: |
  #!/bin/bash -xe
  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

  pacman-key --init
  pacman-key --populate
  pacman -Sy --noconfirm arch-install-scripts

  ## attach the volume
  DEVICE=/dev/xvdf

  ## wait for the volume to attach
  while [ ! -e $DEVICE ]; do
    sleep 1s
  done

  ## create the partition
  echo "n
  p
  1


  w" | fdisk $DEVICE

  ## create the filesystem
  mkfs -t ext4 $DEVICE"1"
  mkdir -p /arch 
  mount -t ext4 "$DEVICE"1 /arch

  ## bootstrap the chroot machine
  pacstrap -G /arch base base-devel zsh git sudo openssh

  ## add ssd key to the chroot machine and export it to port 2222
  mkdir -p /arch/root/.ssh
  curl http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > /arch/root/.ssh/authorized_keys
  ln -s /arch/usr/lib/systemd/system/sshd.service /arch/etc/systemd/system/multi-user.target.wants/sshd.service
  sed '/#Port 22/s/#Port 22/Port 2222/g' -i /arch/etc/ssh/sshd_config
